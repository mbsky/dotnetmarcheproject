<?xml version="1.0" ?>
<project name="dotnetmarche.common" xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<description>
      This is the base build file for dotnetmarche common. It contains various
      base target to be used by different projects of the trunk.

      Common usage is.

      &lt;property name="path.root" value=".." /&gt;
      &lt;include buildfile="${path.root}/Common.build" /&gt;

      Since basic target cannot refer to a specific directory, each project
      must set a property called path.projectbase that point to the base
      directory of the project

      &lt;property name="path.projectbase" value=".." /&gt;
      
		After including the file, a target should be defined to initialize
		configuration variables according to the project being built.
		The standard of this target is init (but any other name can be chosen).
		The init target should depend on (or call) target common.init defined
		in this file.

		Other predefined targets are:

			- common.compile-tests
				compile NUnit tests and copy App.config file to the output directory,
				if it exists.

			- common.compile-dll
				compile a DLL, generating the documentation and using Clover if enabled.

			- common.generate-assemblyinfo, common.generate-assemblyinfoversion
				generate an AssemblyInfo.cs or AssemblyInfoVersion.cs file from
				assembly.* NAnt properties.

			- common.run-tests
				run compiled NUnit tests.

		All compile/run targets put the output in build.dir. Common.compile*
		targets use source fileset with id="project.sources", assembly fileset
		with id="project.references" and resource fileset with id="project.resources"
		to compile the project. The source and resource filesets are optional.

	</description>
   
   <!--This property is used to sign the assembly, the overwrite is false because it is only a default-->
   <property name="assembly.sign" value="true" overwrite="false" />
   
   <!--the path of the keyfile used to sign assemblies-->
   <property name="assembly.keyfile" value="${path::get-full-path(path.root)}/dotnetmarche.snk" />

   <!--Various common directories for the project-->
   <property name="path.libraries" value="${path::get-full-path(path.root)}/ExternalLibs" overwrite="false" />
   
   <!-- These are properties bound to testing -->
   <property name="test.enable" value="true" overwrite="false" />
   <property name="test.makebuilfail" value="true" overwrite="false" />
   

   <!-- Check which nant version we're using - fail if it's not the minium  -->
   <property name="current.nant-version" value="${assemblyname::get-version(assembly::get-name(nant::get-assembly()))}" />
   <property name="required.nant-version" value="0.85.2478.0" />
   
   <!-- Nant 0.85 release version -->

   <property name="path.dotnetframework" value="${framework::get-assembly-directory( framework::get-runtime-framework () )}"/>

   <!-- Versioning -->

   <property name="assembly.major" 	   value="${version::get-major(version::parse(assembly.version))}"	   dynamic="true" />
   <property name="assembly.minor" 	   value="${version::get-minor(version::parse(assembly.version))}" 	   dynamic="true" />
   <property name="assembly.build"		value="${version::get-build(version::parse(assembly.version))}" 	   dynamic="true" />
   <property name="assembly.revision"	value="${version::get-revision(version::parse(assembly.version))}"	dynamic="true" />

   <property name="svn.revision" value="0" overwrite="false" />

   <!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
   <property name="project.company" value="DotNetMarche " />

   <!--These properties defines constant for the build-->
   <property name="build.defines" value="TRACE" />
   <property name="build.defines" value="${build.defines},STRONG" if="${assembly.sign}" />

   <!-- platform specific properties. These are the defaults -->
   <property name="current.build.defines" value="${build.defines}" />

   <!-- named project configurations -->
   <target name="set-debug-project-configuration" description="Perform a 'debug' build">
      <property name="build.debug"	value="Enable" overwrite="false" />
      <property name="build.optimize"	value="false" overwrite="false" />
   </target>

   <target name="set-release-project-configuration" description="Perform a 'release' build">
      <property name="build.debug"	value="None" overwrite="false" />
      <property name="build.optimize" value="true" overwrite="false" />
   </target>

   <target name="set-project-configuration">
      <property name="project.config" value="debug" overwrite="false" />
      <if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
         <fail message="Unknown configuration: '${project.config}'" />
      </if>
      <property name="build.warnaserrors" value="true" overwrite="false" />
      <property name="build.warnmissingdocs" value="false" overwrite="false" />
      <call target="set-${project.config}-project-configuration" />

      <property name="src.dir" 			value="${path::get-full-path(project::get-base-directory())}" />
      <property name="prop.dir" 			value="${src.dir}/Properties" />
      <property name="build.base.dir"		value="${path::get-full-path(path.root)}/build" />
      <property name="build.family.dir"	value="${build.base.dir}/${nant.settings.currentframework}" />
      <property name="build.dir" 			value="${path::get-full-path(path::combine(build.family.dir,project.config))}" dynamic="true" />
      <property name="testresults.dir" 	value="${build.dir}/test-results" />
      <property name="releasenotes.dir"	value="${build.dir}/ReleaseNotes" />
      <property name="docs.dir" 			value="${build.base.dir}/docs" />
      <property name="build.rebuild"		value="false" overwrite="false" />
   </target>

   <!--This target set the framework configuration for current version-->
   <target name="set-framework-configuration">
      <if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
         <fail message="The '${framework::get-target-framework()}' framework is not supported by this version of Common.Build rules." />
      </if>
      <call target="set-${framework::get-target-framework()}-framework-configuration" />
   </target>

   <target name="set-net-2.0-framework-configuration">
      <property name="nant.settings.currentframework" value="net-2.0" />
      <property name="current.build.defines" value="${build.defines},NET,DOTNET2" />
      <property name="link.sdkdoc.version" value="SDK_v2_0" />
      <property name="merge.targetplatform" value="v2" />
      <property name="csc.keyfile" value='/keyfile:"${assembly.keyfile}"' />
      <!-- If DevEnvDir exists, we grab it, otherwise we try if the default location (if it exists) -->
      <if test="${environment::variable-exists('DevEnvDir')}">
         <property name="dev.env.dir" value="${environment::get-variable('DevEnvDir')}" />
      </if>
      <if test="${not environment::variable-exists('DevEnvDir')}">
         <property name="default.dev.env.dir" value="%ProgramFiles%\Microsoft Visual Studio 8\Common7\IDE" />
         <if test="${directory::exists(default.dev.env.dir)}">
            <property name="dev.env.dir" value="${default.dev.env.dir}" />
         </if>
      </if>
      <property name="build.msbuild"	value="false" overwrite="false" />
      <property name="project.vsproj" value="${project::get-name()}-vs2005.csproj" />
   </target>

   <target name="set-net-3.5-framework-configuration">
      <property name="nant.settings.currentframework" value="net-3.5" />
      <property name="current.build.defines" value="${build.defines},NET,DOTNET35" />
      <property name="link.sdkdoc.version" value="SDK_v3_5" />
      <property name="merge.targetplatform" value="v3" />
      <property name="csc.keyfile" value='/keyfile:"${assembly.keyfile}"' />
      <property name="csc.args" 		value="" />
      <property name="build.msbuild"	value="false" overwrite="false" />
      <property name="project.vsproj" value="${project::get-name()}-vs2008.csproj" />
   </target>

   <!--Initializes all the path needed for the build process.-->
   <target name="path.init">
      <mkdir dir="${build.dir}" />
   </target>
   
   <target name="common.init"
		depends="common.check-nant-version set-framework-configuration set-project-configuration path.init"
		description="Initializes build properties">

      <fileset id="project.sources" failonempty="true">
         <include name="${src.dir}/**/*.cs" />
         <exclude name="${src.dir}/obj/**/*.cs" />
         <exclude name="${src.dir}/bin/**/*.cs" />
      </fileset>
      <resourcefileset id="project.resources" />
   </target>

   <target name="common.find-nunit">
      <if test="${not property::exists('nunit.found')}">
         <exec
				program="${mbunit-console}"
				resultproperty="mbunit.found"
				failonerror="false" />

         <property name="mbunit.found" value="${mbunit.found == '0' and string::to-lower(testrunner)=='mbunit'}" readonly="true" />

         <property name="nunit.found" value="-1" />
         <exec
				unless="${mbunit.found}"
				program="${nunit-console2}"
				resultproperty="nunit.found"
				failonerror="false" />

         <property name="nunit-console" value="${nunit-console2}" if="${nunit.found == '0'}" />

         <exec unless="${mbunit.found or nunit.found == '0'}"
				program="${nunit-console}"
				commandline="/help"
				resultproperty="nunit.found"
				output='_nunit.txt'
				failonerror="false" />

         <property name="nunit.found" value="${nunit.found == '0'}" readonly="true" />

         <fail message="ERROR: NUnit or MBUnit not found, cannot continue." unless="${nunit.found or mbunit.found}"/>

         <echo message="INFO: Using MBUnit for running unit tests" if="${mbunit.found}"/>

         <if test="${nunit.found}">
            <!-- Determine if we can use this version of NUnit -->
            <loadfile file="_nunit.txt" property="nunit_txt" />
            <delete file="_nunit.txt" failonerror="false" />
            <property name="nunit_findtxt" value="NUnit version " />
            <property name="nunit_version" value="" />
            <if test="${string::index-of( nunit_txt, nunit_findtxt) >= 0}">
               <property name="nunit_version" value="${string::trim(string::substring(nunit_txt, string::index-of( nunit_txt, nunit_findtxt) + string::get-length(nunit_findtxt),6 ))}" />
            </if>
            <echo if="${string::get-length(nunit_version) == 0}">WARNING: Unable to determine NUnit version, unit tests may fail unpredictably with your version of NUnit</echo>
            <echo if="${string::get-length(nunit_version) > 0}">INFO: Found NUnit ${nunit_version}</echo>
         </if>
      </if>
   </target>

   <target name="common.check-nant-version">
      <fail if="${current.nant-version&lt;required.nant-version}" message="Not using minimum required Nant version: ${required.nant-version} (current version: ${current.nant-version}). Please upgrade your copy of nant." />
   </target>

   <target name="common.build">

	</target>

	<target name="common.compile-tests"
		description="Compile NUnit tests and copy App.config file to the output directory, if it exists.">

		<call target="common.compile-dll" />

		<!-- Check if there is a framework specific config file and use that -->
		<property name="app.config.src" value="${src.dir}/App-${framework::get-target-framework()}.config" />
		<if test="${file::exists(app.config.src)}">
			<copy
				file="${app.config.src}"
				tofile="${build.dir}/${project::get-name()}.dll.config"
			/>

			<call target="common.configure-tests" />
			<property name="app.config.src.found" value="true" />
		</if>
		<!-- In case there was no framework specific config check if there is a framework neutral file and use that. -->
		<property name="app.config.src" value="${src.dir}/App.config" />
		<if test="${file::exists(app.config.src)}" unless="${property::exists('app.config.src.found')}">
			<copy
				file="${app.config.src}"
				tofile="${build.dir}/${project::get-name()}.dll.config"
			/>

			<call target="common.configure-tests" />
		</if>

	</target>

	<target name="common.configure-tests"
		description="Configure tests for running NUnit tests.">

		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<!-- make sure the config file is writable -->
		<attrib file="${app.config}" readonly="false" />

		<xmlpoke
			file="${app.config}"
			xpath="/configuration/appSettings/add[@key='tests.src']/@value"
			value="${src.dir}"
			failonerror="false"
		/>
		<xmlpoke
			file="${app.config}"
			xpath="${test.db.xpath}"
			value="${test.db}" />
	</target>

 	<target name="common.compile-dll"
		description="Compile sources into a DLL">

			<property name="warnaserror" value="${build.warnaserrors}" />
			<property name="project.name" value="${project::get-name()}" overwrite="false" />
 
			<csc
				target="library"
				define="${current.build.defines}"
				debug="${build.debug}"
				optimize="${build.optimize}"
				warnaserror="${warnaserror}"
				output="${build.dir}/${project.name}.dll"
				doc="${build.dir}/${project::get-name()}.xml"
				rebuild="${build.rebuild}">
            
				<nowarn>
					<warning number="1591" unless="${build.warnmissingdocs}" />  <!--No XML comment for publicly visible member--> 
				</nowarn>
				<sources refid="project.sources" />
				<references refid="project.references" />
				<resources refid="project.resources" />
				<arg line="${csc.keyfile}" if="${assembly.sign}" />
				<arg line="${csc.args}" />
			</csc>
	</target>

 	<target name="common.compile-website">
		<property name="bin.dir" value="${src.dir}/bin" />
		<mkdir dir="${bin.dir}" />
		<delete file="${bin.dir}/${project::get-name()}.pdb" failonerror="false" /> <!-- To prevent 1.1 compiler from crashing when switching from a 2.0 build -->
		<property name="build.dir" value="${bin.dir}" />

		<call target="common.compile-dll" />
		<call target="common.copy-references" />
	</target>

 	<target name="common.copy-references">
		<foreach item="File" property="reference">
			<in>
				<items refid="project.references" />
			</in>
			<do>
				<copy file="${reference}" todir="${bin.dir}" overwrite="${build.rebuild}" />
			</do>
		</foreach>
	</target>

	<target name="common.compile-exe"
		description="Compile sources into a console executable">

		<csc
			target="exe"
			define="${current.build.defines}"
			debug="${build.debug}"
			optimize="${build.optimize}"
			warnaserror="${build.warnaserrors}"
			output="${build.dir}/${project::get-name()}.exe"
		>
			<nowarn>
				<warning number="1591" unless="${build.warnmissingdocs}" /> <!-- No XML comment for publicly visible member -->
			</nowarn>
			<sources refid="project.sources" />
			<references refid="project.references" />
			<resources refid="project.resources" />
			<arg line="${csc.keyfile}" if="${assembly.sign}" />
			<arg line="${csc.args}" />
		</csc>
	</target>

   <!--Before setting the assembly attribute values remember to grab information for subversion-->
	<target name="common.set-assembly-attribute-values" depends="common.find-svninfo">
		<property overwrite="false" name="assembly.is-cls-compliant" value="true" />
		<property overwrite="false" name="assembly.is-com-visible" value="false" />
		<property overwrite="false" name="assembly.guid" value="" />
		<property overwrite="false" name="assembly.allow-partially-trusted-callers" value="false" />
		<property overwrite="false" name="assembly.description" value="" />
		<property overwrite="false" name="assembly.product" value="${project::get-name()}" />
		<property overwrite="false" name="assembly.company" value="${project.company}" />
		<property overwrite="false" name="assembly.title" value="${project::get-name()} for ${framework::get-description(framework::get-target-framework())}" />
		<property overwrite="false" name="assembly.version.informational" value="${assembly.major}.${assembly.minor}.${assembly.build}.${svn.revision}" />
		<property overwrite="false" name="assembly.copyright" value="Dotnetmarche (c) 2009" />
		<property overwrite="false" name="assembly.keyfile" value="${assembly.keyfile}" />
		<property overwrite="false" name="assembly.sign" value="${assembly.sign}" />
	</target>

	<target name="common.generate-assemblyinfo"
		depends="common.init common.set-assembly-attribute-values"
		description="Generate AssemblyInfo.cs using assembly.* properties."
	>
		<property name="assemblyinfo.cs" value="${path::combine(prop.dir,'AssemblyInfo.cs')}" />
		<attrib file="${assemblyinfo.cs}" readonly="false"  failonerror="false"/>
		<asminfo output="${assemblyinfo.cs}" language="CSharp" failonerror="false">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.CompilerServices" />
				<import namespace="System.Runtime.InteropServices" />
				<import namespace="System.Security" if="${assembly.allow-partially-trusted-callers}" />
			</imports>
			<attributes>
				<attribute type="CLSCompliantAttribute" value="${assembly.is-cls-compliant}" />
				<attribute type="ComVisibleAttribute" value="${assembly.is-com-visible}" />
				<attribute type="GuidAttribute" value="${assembly.guid}" if="${assembly.guid != ''}" />
				<attribute type="AssemblyTitleAttribute" value="${assembly.title}" />
				<attribute type="AssemblyDescriptionAttribute" value="${assembly.description}" />
				<attribute type="AssemblyCompanyAttribute" value="${assembly.company}" />
				<attribute type="AssemblyProductAttribute" value="${assembly.product}" />
				<attribute type="AssemblyCopyrightAttribute" value="${assembly.copyright}" />
				<attribute type="AssemblyVersionAttribute" value="${assembly.version}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyFileVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyDelaySignAttribute" value="false" />

				<!-- For some reason, NAnt doesn't detect that APTCA has a public no-argument constructor -->
				<attribute asis="true" type="AllowPartiallyTrustedCallersAttribute" if="${assembly.allow-partially-trusted-callers}" />
			</attributes>
		</asminfo>
	</target>

	<!--<target name="common.assemblyinfo">

		<nant target="generate-assemblyinfo">
			<buildfiles refid="buildfiles.all" />
		</nant>

	</target>-->

   <target name="common.find-svninfo">
      <!-- For adding SVN revision to builds -->
      <property name="svn.revision" value="0" overwrite="false" />
      
      <!-- try to update the revision -->
      <exec
			program="svn"
			commandline='info "${project::get-base-directory()}" --xml'
			output="_revision.xml"
			failonerror="false"/>
      <xmlpeek
			file="_revision.xml"
			xpath="/info/entry/@revision"
			property="svn.revision"
			failonerror="false"/>
      <delete file="_revision.xml" failonerror="false" />
      <echo message="INFO: Using Subversion revision number: ${svn.revision}"/>
   </target>
   
	<target name="common.run-tests"
		description="Run MbUnit tests">

		<if test="${common.testrunner.enabled}">
			<call target="detect.xunit"/>
			
			<if test="${use.xunit}">
				<loadtasks assembly="${lib.dir}\xUnit\XUnit.NAntTasks.dll" />

					<xunit assembly="${build.dir}/${project::get-name()}.dll"
					   html="${testresults.dir}\${project::get-name()}.dll-results.html"
					   xml="${testresults.dir}\${project::get-name()}.dll-results.xml"
					   workingDir="${build.dir}" />
				
			</if>
			<if test="${not use.xunit}">					
				<echo message="Running tests in '${project::get-name()}'" />
				<exec
					program="${mbunit-console}"
					workingdir="${build.dir}"
					commandline='${project::get-name()}.dll /rf:"${testresults.dir}" /rnf:"${project::get-name()}.dll-results" /rt:Html /rt:Xml'
					failonerror="${common.testrunner.failonerror}"
				/>

			</if>			
		</if>
		<if test="${not common.testrunner.enabled}">
			<echo message="Tests are disabled for '${project::get-name()}'" />
		</if>

	</target>
	
	<target name="detect.xunit" description="Discover whether to use xunit">
		<property name="use.xunit" value="false" overwrite="false"/>
		<foreach item="File" property="reference">
			<in>
				<items refid="project.references" />
			</in>
			<do>
				<if test="${string::contains(reference,'xunit')}">
					<property name="use.xunit" value="true"/>
				</if>				
			</do>
		</foreach>
	</target>

	<target name="common.run-database-tests"
		depends="common.put-connection-settings-into-app-config common.run-tests common.remove-connection-settings-from-app-config" />

	<target name="common.put-connection-settings-into-app-config">

		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<!-- make sure the config file is writable -->
		<attrib file="${app.config}" readonly="false" />

		<!--
			Tell nhibernate how to connect to the test database.
		-->
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.dialect']/@value"
			value="${nhibernate.dialect}"
		/>
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.driver_class']/@value"
			value="${nhibernate.connection.driver_class}"
		/>
		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.connection_string']/@value"
			value="${nhibernate.connection.connection_string}"
		/>
	</target>

	<target name="common.remove-connection-settings-from-app-config">
		<property name="app.config" value="${build.dir}/${project::get-name()}.dll.config" />

		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.connection_string']/@value"
			value="conn string here"
		/>
	</target>

</project>
