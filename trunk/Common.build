<?xml version="1.0" encoding='iso-8859-1' ?>
<project
	name="TestApp1"
    default="compile-winform"
	xmlns="http://nant.sf.net/nightly/2009-01-30-0.86/nant.xsd">

	<property name="path.buildroot" value="${path.root}/Artifacts/Builds"/>
	<property name="path.build" value="${path.buildroot}/${nant.settings.currentframework}"/>

	<!--Assembly related area, version number etc.-->
	<target name="build.assembly.getrevision.svn">

		<!-- try to update the revision -->
		<exec
			  program="svn"
			  commandline='info "${path.src}" --xml'
			  output="_revision.xml"
			  failonerror="false"/>
		<xmlpeek
			  file="_revision.xml"
			  xpath="/info/entry/@revision"
			  property="project.version.revision"
			  failonerror="false"/>
		<delete file="_revision.xml" failonerror="false" />
		<echo message="INFO: Using Subversion revision number: ${project.version.revision}"/>
	</target>

	<target name="build.common.init" >

		<property name="project.version.major" value="${version::get-major(version::parse(project.version))}" dynamic="true" />
		<property name="project.version.minor" value="${version::get-minor(version::parse(project.version))}" dynamic="true" />
		
		<if test="${not property::exists('CCNetLabel')}">
			<property name="CCNetLabel" value="0"/>
		</if>
		<property name="project.version.build" value="${CCNetLabel}" overwrite="false" dynamic="true" />

		<property name="project.version.revision" value="0" overwrite="false" />

		<property name="project.keyfile" value="${path.root}/dotnetmarche.snk" dynamic="true" overwrite="false"/>

		<property name="project.option.signassembly" value="true" dynamic="true" overwrite="false" />

		<property name="project.path.propertiesdir" value="${path.src}/Properties" dynamic="true" overwrite="false" />

		<property name="path.assembly" value="${framework::get-assembly-directory(framework::get-target-framework())}" />
		<property name="path.framework" value="${framework::get-framework-directory(framework::get-target-framework())}" />
		<property name="path.externallibs" value="${path.root}/ExternalLibs"/>
	</target>

	<target name="build.assembly.setproperties" depends="build.common.init">
		<property overwrite="false" name="assembly.is-cls-compliant" value="true" />
		<property overwrite="false" name="assembly.is-com-visible" value="false" />
		<property overwrite="false" name="assembly.guid" value="" />
		<property overwrite="false" name="assembly.allow-partially-trusted-callers" value="false" />
		<property overwrite="false" name="assembly.description" value="" />
		<property overwrite="false" name="assembly.product" value="${project::get-name()}" />
		<property overwrite="false" name="assembly.company" value="DotNetMarche" dynamic="true" />
		<property overwrite="false" name="assembly.title" value="${project::get-name()} for ${framework::get-description(framework::get-target-framework())}" />
		<property overwrite="false" name="assembly.version"
				  value="${project.version.major}.${project.version.minor}.${project.version.build}.${project.version.revision}" />
		<property overwrite="false" name="assembly.version.informational"
				  value="${project.version.major}.${project.version.minor}.${project.version.build}.${project.version.revision}" />
		<property overwrite="false" name="assembly.copyright" value="DotNetMarche - All Rights Reserved" />
	</target>

	<target name="build.assembly.generateassemblyinfo"
		 depends="build.common.init build.assembly.setproperties"
		 description="Generate AssemblyInfo.cs using assembly.* properties.">

		<property name="assemblyinfo.cs" value="${path::combine(project.path.propertiesdir,'AssemblyInfo.cs')}" />
		<attrib file="${assemblyinfo.cs}" readonly="false"  failonerror="false"/>
		<asminfo output="${assemblyinfo.cs}" language="CSharp" failonerror="false">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.CompilerServices" />
				<import namespace="System.Runtime.InteropServices" />
				<import namespace="System.Security" if="${assembly.allow-partially-trusted-callers}" />
			</imports>
			<attributes>
				<attribute type="CLSCompliantAttribute" value="${assembly.is-cls-compliant}" />
				<attribute type="ComVisibleAttribute" value="${assembly.is-com-visible}" />
				<attribute type="GuidAttribute" value="${assembly.guid}" if="${assembly.guid != ''}" />
				<attribute type="AssemblyTitleAttribute" value="${assembly.title}" />
				<attribute type="AssemblyDescriptionAttribute" value="${assembly.description}" />
				<attribute type="AssemblyCompanyAttribute" value="${assembly.company}" />
				<attribute type="AssemblyProductAttribute" value="${assembly.product}" />
				<attribute type="AssemblyCopyrightAttribute" value="${assembly.copyright}" />
				<attribute type="AssemblyVersionAttribute" value="${assembly.version}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyFileVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyDelaySignAttribute" value="false" />

				<attribute asis="true" type="AllowPartiallyTrustedCallersAttribute" if="${assembly.allow-partially-trusted-callers}" />
			</attributes>
		</asminfo>
	</target>

	<!--Build options-->
	<target name="build.options.setframework2.0">
		<property name="nant.settings.currentframework" value="net-2.0" />
		<property name="current.build.defines" value="NET,DOTNET2" />
		<property name="link.sdkdoc.version" value="SDK_v2_0" />
		<property name="merge.targetplatform" value="v2" />

		<!-- If DevEnvDir exists, we grab it, otherwise we try if the default location (if it exists) -->
		<if test="${environment::variable-exists('DevEnvDir')}">
			<property name="dev.env.dir" value="${environment::get-variable('DevEnvDir')}" />
		</if>
		<if test="${not environment::variable-exists('DevEnvDir')}">
			<property name="default.dev.env.dir" value="%ProgramFiles%\Microsoft Visual Studio 8\Common7\IDE" />
			<if test="${directory::exists(default.dev.env.dir)}">
				<property name="dev.env.dir" value="${default.dev.env.dir}" />
			</if>
		</if>
		<property name="build.msbuild"	value="false" overwrite="false" />
		<property name="project.vsproj" value="${project::get-name()}-vs2005.csproj" />
	</target>

	<target name="build.setup" depends="build.common.init, build.assembly.generateassemblyinfo">

		<mkdir dir="${path.build}"/>

		<fileset id="project.sourcefile" >
			<include name="${path.src}/**/*.cs" />
			<exclude name="${path.src}/obj/**/*.cs" />
			<exclude name="${path.src}/bin/**/*.cs" />
		</fileset>

		<resourcefileset id="project.resourcefile"  dynamicprefix="true" >
			<include name="${path.src}/**/*.resx" />
			<exclude name="${path.src}/obj/**/*.resx" />
			<exclude name="${path.src}/bin/**/*.resx" />
		</resourcefileset>

		<property name="build.csc.keyfile" value='/keyfile:"${project.keyfile}"' />
	</target>

	<target name="compile-winform" depends="build.setup" >
		<csc
			 target="winexe"
			 debug="Enable"
			 optimize="false"
			 warnaserror="false"
			 output="${path.build}/${project.name}.exe"
			 doc="${path.build}/${project.name}.xml"
			 rebuild="true">

			<references refid="project.references" />
			<resources refid="project.resourcefile" />
			<sources refid="project.sourcefile" />
			<arg line="${build.csc.keyfile}" if="${project.option.signassembly}" />
		</csc>
	</target>

	<target name="compile-dll" depends="build.setup" >
		<echo message="Buildkeyfile: ${build.csc.keyfile}" />
		<!--<echo message="${fileset::to-string('project.sourcefile')}"/>-->
		<csc warninglevel="3"
			 target="library"
			 debug="Enable"
			 optimize="false"
			 warnaserror="false"
			 output="${path.build}/${project.name}.dll"
			 doc="${path.build}/${project.name}.xml"
			 rebuild="true">

			<references refid="project.references" />
			<resources refid="project.resourcefile" />
			<sources refid="project.sourcefile" />
			<arg line="${build.csc.keyfile}" if="${project.option.signassembly}" />
		</csc>
	</target>

	<!--Debug functions-->
	<script language="C#" prefix="fileset" >

		<references>
			<include name="System.Dll"/>
		</references>
		<imports>
			<import namespace="NAnt.Core.Types"/>
			<import namespace="System.Collections.Specialized"/>
		</imports>

		<code>
			<![CDATA[
       [Function("contains")]
       public bool Contains( string fsetID, string filepath ) {
           bool found = false;
           FileSet fset = (FileSet)Project.DataTypeReferences[fsetID];
           if ( fset != null ) {
               if ( fset.FileNames.Contains( filepath ) ) {
                   found = true;
               }
           }
           return found;
       }
       [Function("to-string")]
       public string Contains( string fsetID ) {
           StringBuilder results = new StringBuilder();
           FileSet fset = (FileSet)Project.DataTypeReferences[fsetID];
           if ( fset != null ) {
               foreach ( string file in fset.FileNames ) {
                   results.Append( file + Environment.NewLine );
               }
           }
           return results.ToString();
       }
       ]]>
		</code>
	</script>
</project>