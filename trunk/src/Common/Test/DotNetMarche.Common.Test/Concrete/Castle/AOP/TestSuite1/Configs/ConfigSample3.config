<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<facilities>
		<facility id="policy-injection"
				  type="DotNetMarche.Infrastructure.Castle.AOP.PolicyFacility, DotNetMarche.Infrastructure.Castle">
			<!--An advice is a composition of one or more pointcuts that defined the point for the
				 AOP injection and one or more aspects-->
			<advice name="logMethodsWhoseNameIsReturn">
				<pointcut component-id="pointcut1" />
        <pointcut component-id="pointcut2" />
				<aspect component-id="interceptor" />
			</advice>
		</facility>
	</facilities>

	<components>
		  <!--A component is declared before all pointcuts-->
    <component id="someclass"
             type="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.SomeClass, DotNetMarche.Common.Test"
             service="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.ISomething, DotNetMarche.Common.Test"/>



    <component id="pointcut1"
				 type="DotNetMarche.Infrastructure.Castle.AOP.RegularExpressionPointcut, DotNetMarche.Infrastructure.Castle"
				   service="DotNetMarche.Infrastructure.Castle.AOP.IPointcut, DotNetMarche.Infrastructure.Castle">
			<parameters>
				<RegularExpressions>
					<list>
						<item>.*OtherMeth.*</item>
					</list>
				</RegularExpressions>
			</parameters>
		</component >

    <component id="pointcut2"
     type="DotNetMarche.Infrastructure.Castle.AOP.RegularExpressionPointcut, DotNetMarche.Infrastructure.Castle"
       service="DotNetMarche.Infrastructure.Castle.AOP.IPointcut, DotNetMarche.Infrastructure.Castle">
      <parameters>
        <RegularExpressions>
          <list>
            <item>.*AMeth.*</item>
          </list>
        </RegularExpressions>
      </parameters>
    </component >

    <component id="interceptor"
					type="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ConfigurableLogInterceptor, DotNetMarche.Common.Test"
					service="DotNetMarche.Infrastructure.Castle.AOP.IAspect, DotNetMarche.Infrastructure.Castle">
      <parameters>
        <ConfigurableProperty>Configured</ConfigurableProperty>
      </parameters>
    </component>

    <component id="otherclass"
         type="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.OtherClass, DotNetMarche.Common.Test"
         service="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.IAnotherSomething, DotNetMarche.Common.Test"/>

    <component id="throwclass"
				   type="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.ThrowExceptionISomething, DotNetMarche.Common.Test"
				   service="DotNetMarche.Common.Test.Concrete.Castle.AOP.TestSuite1.ExtClasses.ISomething, DotNetMarche.Common.Test"/>

  </components>
</configuration>
